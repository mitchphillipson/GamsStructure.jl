var documenterSearchIndex = {"docs":
[{"location":"sets/#Sets","page":"Sets","title":"Sets","text":"","category":"section"},{"location":"sets/","page":"Sets","title":"Sets","text":"GamsSet\nGamsSet(e::Tuple;description = \"\")   \nGamsSet(x::Vector{Tuple{Symbol,String}};description = \"\")\nGamsSet(e::Vector{Symbol};description = \"\")  \nGamsSet(base_path::String,set_name::Symbol;description = \"\",csv_description = true,aliases = [])\nGamsDomainSet(base_path::String,parm_name::Symbol,column::Int;description = \"\")\n@GamsSet\n@GamsSets","category":"page"},{"location":"sets/#GamsStructure.GamsSet","page":"Sets","title":"GamsStructure.GamsSet","text":"GamsSet(Elements::Vector{GamsElement}, description = \"\")\n\nContainer to hold GamsElements. \n\n\n\n\n\n","category":"type"},{"location":"sets/#GamsStructure.GamsSet-Tuple{Tuple}","page":"Sets","title":"GamsStructure.GamsSet","text":"GamsSet(x::Tuple...;description = \"\")\n\nGamsSet constructor for a tuple of the form (name,description) which will be made into GamsElements\n\n\n\n\n\n","category":"method"},{"location":"sets/#GamsStructure.GamsSet-Tuple{Vector{Tuple{Symbol, String}}}","page":"Sets","title":"GamsStructure.GamsSet","text":"GamsSet(x::Vector{Tuple{Symbol,String}};description = \"\")\n\nGamsSet constructor for a vector of tuples of the form (name,description) which will be made into GamsElements\n\n\n\n\n\n","category":"method"},{"location":"sets/#GamsStructure.GamsSet-Tuple{Vector{Symbol}}","page":"Sets","title":"GamsStructure.GamsSet","text":"GamsSet(e::Vector{Symbol};description = \"\")\n\nGamsSet constructor for a tuple of symbols which will be made into GamsElements with empty description.\n\n\n\n\n\n","category":"method"},{"location":"sets/#GamsStructure.GamsSet-Tuple{String, Symbol}","page":"Sets","title":"GamsStructure.GamsSet","text":"GamsSet(base_path::String,set_name::Symbol;description = \"\",csv_description = true))\n\nLoad a GamsSet from a CSV file at location basepath/setname.csv. \n\nSets must be one dimensional (at least for now) and it's assumed the first column are the elements and the second column is the description. If the second column is missing, the description is \"\"\n\nNote: csv_description currently does nothing. \n\n\n\n\n\n","category":"method"},{"location":"sets/#GamsStructure.GamsDomainSet-Tuple{String, Symbol, Int64}","page":"Sets","title":"GamsStructure.GamsDomainSet","text":"GamsDomainSet(base_path::String,set_info::Tuple;description = \"\")\n\nLoad data from a single column of a CSV into a GamsSet.\n\nThe variable set_info is a tuple of the form (Symbol,Int) where the Int is the column to load.\n\n#Should be modified to be separate inputs.\n\n\n\n\n\n","category":"method"},{"location":"sets/#GamsStructure.@GamsSet","page":"Sets","title":"GamsStructure.@GamsSet","text":"@GamsSet(GU,set_name,description,block)\n\nMacro to create a GamsSet. \n\n@GamsSet(GU,:i,\"example set\",begin\n    element_1, \"Description 1\"\n    element_2, \"Description 2\"\n    element_3, \"Description 3\"\nend)\n\n\n\n\n\n","category":"macro"},{"location":"sets/#GamsStructure.@GamsSets","page":"Sets","title":"GamsStructure.@GamsSets","text":"@GamsSets(GU,base_path,block)\n\nLoad a collection of sets from a file. This will search for  the file base_path\\name.csv where name is the first entry of each line in the block.\n\n@GamsSets(GU,\"sets\",begin     :i, \"Set 1\"     :j, \"Set 2\" end)\n\n\n\n\n\n","category":"macro"},{"location":"elements/#Elements","page":"Elements","title":"Elements","text":"","category":"section"},{"location":"elements/","page":"Elements","title":"Elements","text":"GamsElement","category":"page"},{"location":"elements/#GamsStructure.GamsElement","page":"Elements","title":"GamsStructure.GamsElement","text":"GamsElement(name::union{Symbol,Tuple}, description::String=\"\", active::Bool = true)\n\nA base struct for GamsSets. Each Name will be converted to a symbol.  The active keyword denotes if the element should appear in sets.\n\n\n\n\n\n","category":"type"},{"location":"universe/#Gams-Universe","page":"Gams Universe","title":"Gams Universe","text":"","category":"section"},{"location":"universe/","page":"Gams Universe","title":"Gams Universe","text":"GamsUniverse\nload_universe(path::String;to_load = [],nGU::GamsUniverse = GamsUniverse(),raw_text=true)\nunload(GU::GamsUniverse,path;to_unload = [],raw_text = true)","category":"page"},{"location":"universe/#GamsStructure.GamsUniverse","page":"Gams Universe","title":"GamsStructure.GamsUniverse","text":"GamsUniverse(sets::Dict{Symbol,GamsSet}\n            parameters::Dict{Symbol,GamsParameter}\n            scalars::Dict{Symbol,GamsScalar})\n\nNote: scalars are going to be deprecated soon.\n\nAccess objects like an array,\n\nGU[:X]\n\nThis will return the X object, either a set or parameter. The search order is sets first, then parameters.\n\nPrint a universe to see it's members and their descriptions.\n\n\n\n\n\n","category":"type"},{"location":"universe/#GamsStructure.load_universe-Tuple{String}","page":"Gams Universe","title":"GamsStructure.load_universe","text":"load_universe(path::String;\n              to_load = [],\n              nGU::GamsUniverse = GamsUniverse(),\n              raw_text=true)\n\nLoad a universe from the path.\n\npath - Universe location\n\nto_load - Load specific sets and parameters\n\nnGU - Add sets and parameters to an existing universe\n\nraw_text - Denote if a universe is saved as raw_text or in a binary format.\n\n\n\n\n\n","category":"method"},{"location":"universe/#GamsStructure.unload-Tuple{GamsUniverse, Any}","page":"Gams Universe","title":"GamsStructure.unload","text":"unload(GU::GamsUniverse,\n       path;\n       to_unload = [],\n       raw_text = true)\n\nSave a universe from the path.\n\nGU - The universe to save\n\npath - Universe location\n\nto_unload - Unload specific sets and parameters\n\nraw_text - Denote if a universe is saved as raw_text or in a binary format.\n\n\n\n\n\n","category":"method"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This package is under development and some things may change. ","category":"page"},{"location":"parameters/#Parameters","page":"Parameters","title":"Parameters","text":"","category":"section"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"GamsParameter\nGamsParameter(base_path::String,parm_name::Symbol,sets::Tuple{Vararg{Symbol}},GU::GamsUniverse;description = \"\")\nGamsParameter(base_path::String,parm_name::Symbol,sets::Tuple{Vararg{Symbol}},GU::GamsUniverse,columns::Vector{Int};description = \"\")\n@GamsParameters(GU,block)\n@GamsParameters(GU,base_path,block)\ndomain(P::GamsParameter)","category":"page"},{"location":"parameters/#GamsStructure.GamsParameter","page":"Parameters","title":"GamsStructure.GamsParameter","text":"GamsParameter{N}(GU,sets::Tuple{Vararg{Symbol}},value::Array{Float64,N},description::String)\n\nContainer to hold parameters.\n\nParameters can be indexed either by set name\n\nP[:set1,:set2]\n\nor by list of element names\n\nP[[:element1,:element2],[:e1,:e2]]\n\nor a mix of both\n\nP[:set1,[:e1]]\n\n\n\n\n\n","category":"type"},{"location":"parameters/#GamsStructure.GamsParameter-Tuple{String, Symbol, Tuple{Vararg{Symbol}}, GamsUniverse}","page":"Parameters","title":"GamsStructure.GamsParameter","text":"GamsParameter(base_path::String,parm_name::Symbol,sets,GU::GamsUniverse;description = \"\",columns = missing)\n\nLoad a GamsParameter from a file. \n\n\n\n\n\n","category":"method"},{"location":"parameters/#GamsStructure.GamsParameter-Tuple{String, Symbol, Tuple{Vararg{Symbol}}, GamsUniverse, Vector{Int64}}","page":"Parameters","title":"GamsStructure.GamsParameter","text":"GamsParameter(base_path::String,parm_name::Symbol,sets,GU::GamsUniverse;description = \"\",columns = missing)\n\nLoad a GamsParameter from a file. The columns vector is the specific columns to extract from the document. This is  primarily useful when the column names of a file either don't match the sets or repeat. \n\nThe value column is assumed to be at the end and should not be included in the columns argument. \n\n\n\n\n\n","category":"method"},{"location":"parameters/#GamsStructure.@GamsParameters-Tuple{Any, Any}","page":"Parameters","title":"GamsStructure.@GamsParameters","text":"@GamsParameters(GU,block)\n\nCreate many empty parameters\n\n@GamsParameters(GU,begin\n    :P, (:set_1,:set_2), \"Description 1\"\n    :X, (:set_1,), \"Description 2\"\nend)\n\n\n\n\n\n","category":"macro"},{"location":"parameters/#GamsStructure.@GamsParameters-Tuple{Any, Any, Any}","page":"Parameters","title":"GamsStructure.@GamsParameters","text":"@GamsParameters(GU,base_path,block)\n\nLoad parameters from a file. This will search base_path\\name.csv.\n\n@GamsParameters(GU,begin\n    :P, (:set_1,:set_2), \"Description 1\"\n    :X, (:set_1,), \"Description 2\"\nend)\n\n\n\n\n\n","category":"macro"},{"location":"parameters/#GamsStructure.domain-Tuple{GamsParameter}","page":"Parameters","title":"GamsStructure.domain","text":"domain(P::GamsParameter)\n\nReturn the domain of the paramter P in the form of a vector of symbols.\n\n\n\n\n\n","category":"method"}]
}
