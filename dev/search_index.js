var documenterSearchIndex = {"docs":
[{"location":"sets/#Sets","page":"Sets","title":"Sets","text":"","category":"section"},{"location":"sets/","page":"Sets","title":"Sets","text":"GamsSet\nGamsSet(e::Tuple;description = \"\")   \nGamsSet(x::Vector{Tuple{Symbol,String}};description = \"\")\nGamsSet(e::Vector{Symbol};description = \"\")  \nGamsDomainSet(base_path::String,parm_name::Symbol,column::Int;description = \"\")\n@set\nload_set\nload_set!\n@load_sets!","category":"page"},{"location":"sets/#GamsStructure.GamsSet","page":"Sets","title":"GamsStructure.GamsSet","text":"GamsSet(Elements::Vector{GamsElement}, description = \"\")\n\nContainer to hold GamsElements. \n\nBest way to create a new set is using the @set macro.\n\n\n\n\n\n","category":"type"},{"location":"sets/#GamsStructure.GamsSet-Tuple{Tuple}","page":"Sets","title":"GamsStructure.GamsSet","text":"GamsSet(x::Tuple...;description = \"\")\n\nGamsSet constructor for a tuple of the form (name,description) which will be made into GamsElements\n\n\n\n\n\n","category":"method"},{"location":"sets/#GamsStructure.GamsSet-Tuple{Vector{Tuple{Symbol, String}}}","page":"Sets","title":"GamsStructure.GamsSet","text":"GamsSet(x::Vector{Tuple{Symbol,String}};description = \"\")\n\nGamsSet constructor for a vector of tuples of the form (name,description) which will be made into GamsElements\n\n\n\n\n\n","category":"method"},{"location":"sets/#GamsStructure.GamsSet-Tuple{Vector{Symbol}}","page":"Sets","title":"GamsStructure.GamsSet","text":"GamsSet(e::Vector{Symbol};description = \"\")\n\nGamsSet constructor for a tuple of symbols which will be made into GamsElements with empty description.\n\n\n\n\n\n","category":"method"},{"location":"sets/#GamsStructure.GamsDomainSet-Tuple{String, Symbol, Int64}","page":"Sets","title":"GamsStructure.GamsDomainSet","text":"GamsDomainSet(base_path::String,set_info::Tuple;description = \"\")\n\nLoad data from a single column of a CSV into a GamsSet.\n\nThe variable set_info is a tuple of the form (Symbol,Int) where the Int is the column to load.\n\n#Should be modified to be separate inputs.\n\n\n\n\n\n","category":"method"},{"location":"sets/#GamsStructure.@set","page":"Sets","title":"GamsStructure.@set","text":"@set(GU, set_name, description, block)\n\nMacro to create a GamsSet. \n\n@set(GU,I,\"example set\",begin\n    element_1, \"Description 1\"\n    element_2, \"Description 2\"\n    element_3, \"Description 3\"\nend)\n\nThis will put the set I in the local name space as well.\n\n\n\n\n\n","category":"macro"},{"location":"sets/#GamsStructure.load_set","page":"Sets","title":"GamsStructure.load_set","text":"load_set(path::String;description = \"\",aliases=[])\n\nLoad a GamsSet from a CSV file at the given location. \n\nSets must be one dimensional (at least for now) and it's assumed the first column are the elements and the second column is the description. If the second column is missing, the description is \"\"\n\n\n\n\n\n","category":"function"},{"location":"sets/#GamsStructure.load_set!","page":"Sets","title":"GamsStructure.load_set!","text":"load_set!(GU::GamsUniverse,set_name::Symbol,path::String;description=\"\",aliases=[])\n\nSame as load_set, except the set gets added to the universe.\n\n\n\n\n\n","category":"function"},{"location":"sets/#GamsStructure.@load_sets!","page":"Sets","title":"GamsStructure.@load_sets!","text":"@GamsSets(GU,base_path,block)\n\nLoad a collection of sets from a file. This will search for  the file base_path\\name.csv where name is the first entry of each line in the block.\n\n@GamsSets(GU,\"sets\",begin     :i, \"Set 1\", filepath => \"othername.csv\"     :j, \"Set 2\" end)\n\n\n\n\n\n","category":"macro"},{"location":"elements/#Elements","page":"Elements","title":"Elements","text":"","category":"section"},{"location":"elements/","page":"Elements","title":"Elements","text":"GamsElement","category":"page"},{"location":"elements/#GamsStructure.GamsElement","page":"Elements","title":"GamsStructure.GamsElement","text":"GamsElement(name::union{Symbol,Tuple}, description::String=\"\", active::Bool = true)\n\nA base struct for GamsSets. Each Name will be converted to a symbol.  The active keyword denotes if the element should appear in sets.\n\n\n\n\n\n","category":"type"},{"location":"universe/#Gams-Universe","page":"Gams Universe","title":"Gams Universe","text":"","category":"section"},{"location":"universe/","page":"Gams Universe","title":"Gams Universe","text":"GamsUniverse\nload_universe(path::String;to_load = [],nGU::GamsUniverse = GamsUniverse(),raw_text=true)\nunload(GU::GamsUniverse,path;to_unload = [],raw_text = true)","category":"page"},{"location":"universe/#GamsStructure.GamsUniverse","page":"Gams Universe","title":"GamsStructure.GamsUniverse","text":"GamsUniverse(sets::Dict{Symbol,GamsSet}\n            parameters::Dict{Symbol,GamsParameter}\n            scalars::Dict{Symbol,GamsScalar})\n\nNote: scalars are going to be deprecated soon.\n\nAccess objects like an array,\n\nGU[:X]\n\nThis will return the X object, either a set or parameter. The search order is sets first, then parameters.\n\nPrint a universe to see it's members and their descriptions.\n\n\n\n\n\n","category":"type"},{"location":"universe/#GamsStructure.load_universe-Tuple{String}","page":"Gams Universe","title":"GamsStructure.load_universe","text":"load_universe(path::String;\n              to_load = [],\n              nGU::GamsUniverse = GamsUniverse(),\n              raw_text=true)\n\nLoad a universe from the path.\n\npath - Universe location\n\nto_load - Load specific sets and parameters\n\nnGU - Add sets and parameters to an existing universe\n\nraw_text - Denote if a universe is saved as raw_text or in a binary format.\n\n\n\n\n\n","category":"method"},{"location":"universe/#GamsStructure.unload-Tuple{GamsUniverse, Any}","page":"Gams Universe","title":"GamsStructure.unload","text":"unload(GU::GamsUniverse,\n       path;\n       to_unload = [],\n       raw_text = true)\n\nSave a universe from the path.\n\nGU - The universe to save\n\npath - Universe location\n\nto_unload - Unload specific sets and parameters\n\nraw_text - Denote if a universe is saved as raw_text or in a binary format.\n\n\n\n\n\n","category":"method"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This package is under development and some things may change. ","category":"page"},{"location":"parameters/#Parameters","page":"Parameters","title":"Parameters","text":"","category":"section"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"Parameter\n@parameter\n@parameters\nload_parameter(GU::GamsUniverse,\n                        path_to_parameter::String,\n                        domain::Tuple{Vararg{Symbol}};\n                        description::String = \"\",\n                        columns::Union{Vector{Int},Missing} = missing,\n                        value_name = :value\n                        )\nload_parameter!(GU::GamsUniverse,\n                path_to_parameter::String,\n                name::Symbol,\n                domain::Tuple{Vararg{Symbol}};\n                description::String = \"\",\n                columns::Union{Vector{Int},Missing} = missing,\n                value_name = :value\n                )","category":"page"},{"location":"parameters/#GamsStructure.Parameter","page":"Parameters","title":"GamsStructure.Parameter","text":"Parameter(GU,domain::Tuple{Vararg{Symbol}};description::String=\"\") = new{Float64,length(domain)}(GU,domain,Dict{Any,Float64}(),description)\n\nContainer to hold parameters. Highly recommended to create using the @parameter macro.\n\nParameters can be indexed either by set name\n\nP[:set1,:set2]\n\nor by list of element names\n\nP[[:element1,:element2],[:e1,:e2]]\n\nor a mix of both\n\nP[:set1,:e1]\n\nOrder of precedence is set then element, so if you have an element with the same symbol as the set name, there will be a conflict. You can either wrap the element name in a  vector or avoid this.  \n\n\n\n\n\n","category":"type"},{"location":"parameters/#GamsStructure.@parameter","page":"Parameters","title":"GamsStructure.@parameter","text":"@parameter(GU, name, domain, kwargs...)\n\nCreate a parameter in the universe. Also puts the name in the local namespace.\n\n@parameter(GU, p, (:I,:J), description = \"this is p\")\n\nThis assumes both I and J are sets already in GU. The description is an optional (but recommended) argument. \n\n\n\n\n\n","category":"macro"},{"location":"parameters/#GamsStructure.@parameters","page":"Parameters","title":"GamsStructure.@parameters","text":"@parameters(model, block)\n\nPlural version of @parameter. \n\n@parameters(GU, begin\n    p, (:i,:j), (description = \"This is p\",)\n    t, :i\n\nThis create two parameters, p and t. p will have a description.\n\n\n\n\n\n","category":"macro"},{"location":"parameters/#GamsStructure.load_parameter-Tuple{GamsUniverse, String, Tuple{Vararg{Symbol}}}","page":"Parameters","title":"GamsStructure.load_parameter","text":"load_parameter(GU::GamsUniverse,\n               path_to_parameter::String,\n               domain::Tuple{Vararg{Symbol}};\n               description::String = \"\",\n               columns::Union{Vector{Int},Missing} = missing,\n               value_name = :value\n               )\n\nLoad and return a parameter from a CSV file.\n\nGU - Parent universe. The parameter will not be added to the universe\n\npath_to_parameter - Where the parameter lives\n\ndomain - A tuple of the names of the domain sets\n\ndescription - A description of the parameter. Defaults to empty string\n\ncolumns - If the names in the CSV don't match the set names, use this to specify which  columns correspond to the sets.\n\nvalue_name - The name of the column where the values live. Can also be an integer.\n\nThis function requires a specific format of CSV file:\n\nset_1 set_2 value\n... ... ...\n\nBy default, the function expects the columns names in the CSV to match the set names, however, this can be modified using the columns parameter. \n\n\n\n\n\n","category":"method"},{"location":"parameters/#GamsStructure.load_parameter!-Tuple{GamsUniverse, String, Symbol, Tuple{Vararg{Symbol}}}","page":"Parameters","title":"GamsStructure.load_parameter!","text":"load_parameter!(GU::GamsUniverse,\n                path_to_parameter::String,\n                name::Symbol,\n                domain::Tuple{Vararg{Symbol}};\n                description::String = \"\",\n                columns::Union{Vector{Int},Missing} = missing,\n                value_name = :value\n                )\n\nIdentical to load_parameter except it includes the parameter in GU.\n\n\n\n\n\n","category":"method"}]
}
